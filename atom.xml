<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新小梦</title>
  
  <subtitle>热爱 • 编程</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-05T08:43:51.594Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zhangws</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="http://example.com/2020/12/20/Threadlocal/"/>
    <id>http://example.com/2020/12/20/Threadlocal/</id>
    <published>2020-12-20T04:12:57.000Z</published>
    <updated>2021-02-05T08:43:51.594Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、什么是ThreadLocal"><a href="#一、什么是ThreadLocal" class="headerlink" title="一、什么是ThreadLocal"></a>一、什么是ThreadLocal</h3><p>ThreadLocal用于保存线程全局变量，以方便调用。即，当前线程独有，不与其他线程共享；可在当前线程任何地方获取到该变量。</p><h3 id="二、ThreadLocal的使用"><a href="#二、ThreadLocal的使用" class="headerlink" title="二、ThreadLocal的使用"></a>二、ThreadLocal的使用</h3><h4 id="1、如何保存内容"><a href="#1、如何保存内容" class="headerlink" title="1、如何保存内容"></a>1、如何保存内容</h4><p>创<code>ThreadLocal</code>实例，并调用<code>set</code>函数，保存<code>中国</code>字符串，分别在当前线程和<code>new-thread</code>线程获取该值。通过打印结果可以看到，虽然引用的是同个对象，但<code>new-thread</code>线程获取到的值却是<code>null</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210115104823.png" alt="use"></p><p>运行结果:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main 中国</span><br><span class="line">MainActivity: new-thread null</span><br></pre></td></tr></tbody></table></figure><p>这是什么情况呢？</p><p>在<code>ThreadLocal</code>的<code>set</code>函数中，获取当前线程的<code>ThreadLocalMap</code>实例，如何当前线程第一次使用<code>ThreadLocal</code>,则需要创建<code>ThreadLocalMap</code>实例，否则直接通过<code>ThreadLocalMap</code>实例的<code>set</code>函数进行保存。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210115103657.png" alt="set"></p><h4 id="2、如何获取内容"><a href="#2、如何获取内容" class="headerlink" title="2、如何获取内容"></a>2、如何获取内容</h4><p>由于<code>main</code>线程前面<code>set</code>函数将内容保存到<code>ThreadLocalMap</code>实例中，已经可以获取到<code>中国</code>字符串。而在<code>new-thread</code>线程中，由于是第一次使用<code>ThreadLocalMap</code>，所以此时<code>map</code>是<code>null</code>，并调用<code>setInitialValue</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210115111259.png" alt="get"></p><p>在<code>setInitialValue</code>函数中,调用了<code>initialValue</code>函数，该函数直接返回了<code>null</code>，这就是为什么在<code>new-thread</code>线程获取的值是<code>null</code>。因此<code>setInitialValue</code>函数主要为当前线程创建<code>ThreadLocalMap</code>对象。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210115112648.png" alt="setInitialValue"></p><h4 id="3、ThreadLocalMap"><a href="#3、ThreadLocalMap" class="headerlink" title="3、ThreadLocalMap"></a>3、ThreadLocalMap</h4><p><code>ThreadLocalMap</code>内部持有一个数组<code>table</code>，用于保存<code>Entry</code>元素。<code>Entry</code>继承至<code>WeakReference</code>,并以<code>ThreadLcoal</code>实例作为<code>key</code>，和保存内容 T作为<code>value</code>。当发生GC时，<code>key</code>就会被回收,从而导致该Entry过期。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210118144659.png" alt="Entry"></p><p>每一个线程都持有一个<code>ThreadLocalMap</code>局部变量<code>threadLocas</code>，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210118113312.png" alt="image-20210118113312896"></p><h5 id="3-1-ThreadLocalMap的创建"><a href="#3-1-ThreadLocalMap的创建" class="headerlink" title="3.1 ThreadLocalMap的创建"></a>3.1 ThreadLocalMap的创建</h5><p>ThreadLocalMap对象的创建，也就是ThreadLocal 对象调用了自身的<code>createMap</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210115114648.png" alt="createMap"></p><p>ThreadLocalMap的构造函数，创建了一个保存Entry对象的table数组，默认大小16。并通过<code>threadLocal</code>的<code>threadLocalHashCode</code>属性计算出Entry在数组的小标，进行保存，并计算出阈值<code>INITIAL_CAPACITY</code>的2/3。</p><p><code>threadLocalHashCode</code>属性在ThreaLocal对象创建时会自动计算得出.</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210115145913.png" alt="threadLocalHashCode"></p><p><code>threadLocalHashCode</code>作为ThreadLocal的唯一实例变量，在不同的实例中是不同的，通过<code>nextHashCode.getAndAdd</code>已经定义了下一个ThreadLcoal的实例的<code>threadLocalHashCode</code>值，而第一个ThreadLocal的<code>threadLocalHashCode</code>值则是从0开始，与下一个<code>threadLocalHashCode</code>间隔<code>HASH_INCREMENT</code>。</p><p>通过<code>threadLocalHashCode &amp; (len-1)</code>计算出来的数组下标，分发很均匀，减少冲突。但是呢，冲突时还是会出现，如果发生冲突，则将新增的Entry放到后侧<code>entry=null</code>的地方。</p><h3 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h3><h4 id="1、ThreadLocalMap的set函数"><a href="#1、ThreadLocalMap的set函数" class="headerlink" title="1、ThreadLocalMap的set函数"></a>1、ThreadLocalMap的set函数</h4><p>在上一节中，分析了<code>ThreadLocal</code>实例的<code>set</code>函数，最终是调用了<code>ThreadLocalMap</code>实例的<code>set</code>函数进行保存。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210116153208.png" alt="mapset"></p><p>通过代码分析可知，<code>ThreadLocalMap</code>的<code>set</code>函数主要分为三个主要步骤：</p><ol><li><p>计算出当前<code>ThreadLocal</code>在<code>table</code>数组的位置，然后向后遍历，直到遍历到的<code>Entry</code>为<code>null</code>则停止，遍历到<code>Entry</code>的<code>key</code>与当前<code>threadLocal</code>实例的相等，直接更替value；</p></li><li><p>如果遍历到<code>Entry</code>已过期（<code>Entry</code>的<code>key</code>为<code>null</code>），则调用<code>replaceStaleEntry</code>函数进行替换。</p></li><li><p>在遍历结束后，未出现1和2两种情况，则直接创建新的<code>Entry</code>，保存到数组最后侧没有Entry的位置。</p></li></ol><p>在第2步骤和最后都会清理过期的<code>Entry</code>，这个稍后分析，先看看第2步骤，在检测到过期的Entry，会调用<code>replaceStaleEntry</code>函数进行替换。</p><p>   <img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210116152455.png" alt="replaceStaleEntry"></p><p><code>replaceStaleEntry</code>函数，主要分为两次遍历，以当前过期的Entry为分割线，一次向前遍历，一次向后遍历。</p><p>在向前遍历过程，如果发现有过期的<code>Entry</code>，则保留其位置<code>slotToExpunge</code>，直到有<code>Entry</code>为<code>null</code>为止。这里只是判断<code>staleSlot</code>前方是否有过期的<code>Entry</code>，然后方便后面进行清理。</p><p>在向后遍历过程，如果发现有<code>key</code>相同的<code>Entry</code>，直接与<code>staleSlot</code>位置的<code>Entry</code>交换<code>value</code>（上图注释有问题）。如果没有碰到相同的<code>key</code>，则创建新的<code>Entry</code>保存到<code>staleSlot</code>位置。与此同时，如果向前遍历没有发现过期Entry，而在向后遍历发现过期的<code>ntry</code>，则需要更新过期位置<code>slotToExpunge</code>，因为后面的清除内容是需要<code>slotToExpunge</code>。</p><h4 id="2、ThreadLocalMap清除过期Entry"><a href="#2、ThreadLocalMap清除过期Entry" class="headerlink" title="2、ThreadLocalMap清除过期Entry"></a>2、ThreadLocalMap清除过期Entry</h4><p>在上一小节中，会通过<code>expungeStaleEntry</code>函数和<code>cleanSomeSlots</code>函数清理过期的Entry，它们又是如何实现呢？</p><p><code>expungeStaleEntry</code>函数清理过期<code>Entry</code>过程被称为：<strong>探测式清理</strong>。函数传递进来的参数是过期的<code>Entry</code>的位置，工作过程是先将该位置置为<code>null</code>，然后遍历数组后侧所有位置的Entry，如果遍历到有<code>Entry</code>过期,则直接置<code>null</code>，否则将它移到合适的位置：<code>hash</code>计算出来的位置或离该<code>hash</code>位置最近的位置。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210116165619.png" alt="expungeStaleEntry"></p><p>经过这么一次经历，<code>staleSlot</code>位置到后侧最近<code>entry=null</code>的位置就不存在过期的<code>entry</code>，而每个<code>entry</code>要么在原有<code>hash</code>位置，要么离原有<code>hash</code>位置最近。</p><p><code>expungeStaleEntry</code>函数的工作范围：</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210116174219.png" alt="expungeStaleEntry (1)"></p><p><code>expungeStaleEntry</code>函数一开始会将起点，即数组第3的位置设置为<code>null</code>。然后开始遍历数组后侧元素，4和5位置无论是否在它的<code>hash</code>位置，在这里都保持不变。遍历到第6时，发现<code>entry</code>已过期，将第6设置为<code>null</code>。此时3和6位置变成白色了。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210116175944.png" alt="image-20210116175944199"></p><p>A、遍历到第7的时候，假设<code>h != i</code>成立，那么第7位置的<code>entry</code>将被移到第6位置，空出第7位置。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210116180006.png" alt="image-20210116180006575"></p><p>B、接着遍历到第8位置，假设<code>h != i</code>不成立，则第8的<code>entry</code>的位置不变。</p><p>接着继续遍历后侧元素，重复着A和B步骤，直到碰到entry为null，退出遍历。例如这里的第10位置，entry=null。</p><p>由于探测性清理，碰到<code>entry=null</code>的情况就会结束。而通过<code>cleanSomeSlots</code>函数进行<strong>启发式清理</strong>，碰到<code>entry=null</code>不停止，而是由控制条件n决定，而在这个过程中，碰到过期<code>entry</code>，n又恢复到数组长度,加大清理范围。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210118101626.png" alt="clean"></p><p>在启发式清理过程，如果碰到过期<code>Entry</code>，会导致控制条件<code>n</code>恢复到数组长度<code>len</code>，从而导致循环次数增加，则往后<code>nextIndex</code>次数增加，从而增加清理范围。这种方式也不一定能完整清理后面所有过期元素，例如在控制<code>n</code>右移所有过程中，没有碰到过期的<code>entry</code>，就结束了。</p><h4 id="3、ThreadLocalMap的扩容机制"><a href="#3、ThreadLocalMap的扩容机制" class="headerlink" title="3、ThreadLocalMap的扩容机制"></a>3、ThreadLocalMap的扩容机制</h4><p>在第1节，调用<code>ThreadLocalMap</code>的<code>set</code>函数最后，会调用<code>reHash</code>函数进行扩容。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210118110300.png" alt="rehash"></p><p>在外层进行启发式清理后，如果<code>size&gt;threshold</code>则会进行rehash，而在<code>rehash</code>中，会清理整个数组的过期<code>Entry</code>，如果清理后，数组长度还大于<code>3/4*threshod</code>，则进行扩容<code>resize</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210118111623.png" alt="resize"></p><p><code>resize</code>函数直接创建新的数组，长度为旧数组的两倍。然后重新计算旧数组元素在新数组的位置，复制。</p><h3 id="四、内存泄露"><a href="#四、内存泄露" class="headerlink" title="四、内存泄露"></a>四、内存泄露</h3><p>正常情况下，用完ThreadLocal实例,将其置为null，在发生GC时，ThreadLocal对象就会被回收。但是此时如果线程还存活(例如线程池线程的复用)，就会导致Entry的value对象得不到释放，会造成内存泄露。所以，在使用完ThreadLocal实例后，调用<code>remove</code>函数清除一下。</p><h4 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h4><p>发生GC的时候，Key会被回收么，还能获取到值么？</p><p>正常情况下，如果ThreadLocal实例同时被强引用，所以在发生GC的时候，是不会回收的，也就是此时<code>WeakReference.get</code>是有返回值的，不会被回收。</p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210118174100.png" alt="gc"></p><p><img src="https://cdn.jsdelivr.net/gh/Android-XXM/dio@main/img/20210118175757.png" alt="image-20210118175757028"></p><p><a href="https://zhuanlan.zhihu.com/p/58931565?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=1182794502313586688">推荐阅读：Java引用与ThreadLocal</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、什么是ThreadLocal&quot;&gt;&lt;a href=&quot;#一、什么是ThreadLocal&quot; class=&quot;headerlink&quot; title=&quot;一、什么是ThreadLocal&quot;&gt;&lt;/a&gt;一、什么是ThreadLocal&lt;/h3&gt;&lt;p&gt;ThreadLocal用于保</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
  </entry>
  
</feed>
